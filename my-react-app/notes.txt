Summary: 
(base) PS C:\Users\nhari\OneDrive\Documents\sencha\reactvitemvnsprbootmysql>

 npm install -g create-vite // install vite globally & npm means node package manager ie. npm is a package manager for the JavaScript programming language. Package manager means it is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer's operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites. install globally means it is available for all the projects in the system.

npm init vite@latest my-react-app -- --template react // create a new react app using vite ie. npm init vite@latest my-react-app -- --template react. npm init is a command to initialize a new project ie. it creates a new project in the current directory. vite is a tool to create a new project. my-react-app is the name of the project. --template react is a template to create a react project. npm init vite@latest my-react-app -- --template react is a command to create a new react project using vite. It quickly scaffolds a new project with a single command in a lightening speed.

cd my-react-app
npm install // install all the dependencies ie node_modules which are required for the project to run successfully 
npm run dev

keytool -genkeypair -alias my-ssl-cert -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore.p12 -validity 3650

Move keystore.p12 to resources folder

C:\Windows\System32\curl.exe -v https://localhost:8443/greet --insecure


https://localhost:8443
https://localhost:8443/greet


Yes, with the current setup, you have created a mini full-stack demo application. Your application consists of:

1. **Backend**:
   - A Spring Boot application that provides a REST API to manage employee data.
   - The `EmpController` class exposes the `/api/employees` endpoint.
   - The `EmpRepository` interface interacts with the H2 database to fetch employee data.
   - CORS configuration to allow cross-origin requests from the React frontend.

2. **Frontend**:
   - A React application that fetches employee data from the backend and displays it in a table.
   - The [`EmployeeList`] component handles data fetching and rendering.

### Summary of Your Full-Stack Application:

#### Backend (Spring Boot):

- **Controller**: `EmpController.java`
  ```java
  package com.example.demo;

  import org.springframework.beans.factory.annotation.Autowired;
  import org.springframework.web.bind.annotation.CrossOrigin;
  import org.springframework.web.bind.annotation.GetMapping;
  import org.springframework.web.bind.annotation.RestController;

  import java.util.List;

  @RestController
  @CrossOrigin(origins = "http://localhost:5173")
  public class EmpController {

      @Autowired
      private EmpRepository empRepository;

      @GetMapping("/api/employees")
      public List<Emp> getAllEmployees() {
          return empRepository.findAll();
      }
  }
  ```

- **Repository**: `EmpRepository.java`
  ```java
  package com.example.demo;

  import org.springframework.data.jpa.repository.JpaRepository;

  public interface EmpRepository extends JpaRepository<Emp, Long> {
  }
  ```

- **Entity**: `Emp.java`
  ```java
  package com.example.demo;

  import jakarta.persistence.Entity;
  import jakarta.persistence.GeneratedValue;
  import jakarta.persistence.GenerationType;
  import jakarta.persistence.Id;

  @Entity
  public class Emp {

      @Id
      @GeneratedValue(strategy = GenerationType.IDENTITY)
      private Long id;
      private String name;
      private String department;
      private double salary;

      // Getters and Setters
      public Long getId() {
          return id;
      }

      public void setId(Long id) {
          this.id = id;
      }

      public String getName() {
          return name;
      }

      public void setName(String name) {
          this.name = name;
      }

      public String getDepartment() {
          return department;
      }

      public void setDepartment(String department) {
          this.department = department;
      }

      public double getSalary() {
          return salary;
      }

      public void setSalary(double salary) {
          this.salary = salary;
      }
  }
  ```

- **CORS Configuration** (if needed globally): `WebConfig.java`
  ```java
  package com.example.demo;

  import org.springframework.context.annotation.Bean;
  import org.springframework.context.annotation.Configuration;
  import org.springframework.web.servlet.config.annotation.CorsRegistry;
  import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

  @Configuration
  public class WebConfig {

      @Bean
      public WebMvcConfigurer corsConfigurer() {
          return new WebMvcConfigurer() {
              @Override
              public void addCorsMappings(CorsRegistry registry) {
                  registry.addMapping("/api/**")
                          .allowedOrigins("http://localhost:5173")
                          .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                          .allowedHeaders("*")
                          .allowCredentials(true);
              }
          };
      }
  }
  ```

#### Frontend (React):

- **Component**: [`EmployeeList.jsx`](command:_github.copilot.openRelativePath?%5B%7B%22scheme%22%3A%22file%22%2C%22authority%22%3A%22%22%2C%22path%22%3A%22%2Fc%3A%2FUsers%2Fnhari%2FOneDrive%2FDocuments%2Fsencha%2Freactvitemvnsprbootmysql%2Fmy-react-app%2Fsrc%2FEmployeeList.jsx%22%2C%22query%22%3A%22%22%2C%22fragment%22%3A%22%22%7D%2C%22f3ef4ec6-1dc0-4874-8b2d-a2f40b49a99b%22%5D "c:\Users\nhari\OneDrive\Documents\sencha\reactvitemvnsprbootmysql\my-react-app\src\EmployeeList.jsx")
  ```jsx
  import React, { useEffect, useState } from 'react';

  const EmployeeList = () => {
    const [employees, setEmployees] = useState([]);
    const [error, setError] = useState(null);

    useEffect(() => {
      fetch('https://localhost:8443/api/employees')
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => setEmployees(data))
        .catch((error) => {
          console.error('Error fetching employees:', error);
          setError(error.toString());
        });
    }, []);

    return (
      <div>
        <h1>Employee List</h1>
        {error && <p style={{ color: 'red' }}>{error}</p>}
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Department</th>
              <th>Salary</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp) => (
              <tr key={emp.id}>
                <td>{emp.id}</td>
                <td>{emp.name}</td>
                <td>{emp.department}</td>
                <td>{emp.salary}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  export default EmployeeList;
  ```

- **Main App Component**: `App.jsx`
  ```jsx
  import { useState } from 'react';
  import reactLogo from './assets/react.svg';
  import viteLogo from '/vite.svg';
  import './App.css';
  import EmployeeList from './EmployeeList.jsx';

  function App() {
    const [count, setCount] = useState(0);

    return (
      <>
        <div>
          <a href="https://vitejs.dev" target="_blank">
            <img src={viteLogo} className="logo" alt="Vite logo" />
          </a>
          <a href="https://react.dev" target="_blank">
            <img src={reactLogo} className="logo react" alt="React logo" />
          </a>
        </div>
        <h1>Vite + React</h1>
        <h1>My 1st React App</h1>
        <input type="text" placeholder="Enter your name" />
        <div className="App">
          <EmployeeList />
        </div>
        <div className="card">
          <button onClick={() => setCount((count) => count + 1)}>
            count is {count}
          </button>
          <p>
            Edit <code>src/App.jsx</code> and save to test HMR
          </p>
        </div>
        <p className="read-the-docs">
          Click on the Vite and React logos to learn more
        </p>
      </>
    );
  }

  export default App;
  ```

### Running the Application:

1. **Start the Spring Boot Application**:
   ```sh
   mvn spring-boot:run
   ```

2. **Start the React Development Server**:
   ```sh
   npm start
   ```

3. **Access the Application**:
   Open your web browser and navigate to `http://localhost:5173` to see the employee list.

### Conclusion:

With the backend and frontend components working together, you have successfully created a mini full-stack demo application. This setup demonstrates how to build a full-stack application using Spring Boot for the backend and React for the frontend.
